diff --git a/ocaml/sastranslator.ml b/ocaml/sastranslator.ml
index 00452ed..1ccd897 100644
--- a/ocaml/sastranslator.ml
+++ b/ocaml/sastranslator.ml
@@ -181,11 +181,13 @@ module TypeTable =
 			let add_store_values env =
 				FlatStore.fold (
 					fun r v table ->
-						match TEnv.type_of env r with
-						| Sfsyntax.TUndefined -> error 503
-						| Sfsyntax.TBasic Sfsyntax.TSchema (sid, super) ->
-							add_object (Sfsyntax.TSchema (sid, super)) (Basic (Ref r)) super table
-						| t -> add_value t v table
+						if v = Any then table
+						else
+							match TEnv.type_of env r with
+							| Sfsyntax.TUndefined -> error 503
+							| Sfsyntax.TBasic Sfsyntax.TSchema (sid, super) ->
+								add_object (Sfsyntax.TSchema (sid, super)) (Basic (Ref r)) super table
+							| t -> add_value t v table
 				)
 			in
 			let table00 = add_store_values env_0 fs_0 empty in
@@ -240,6 +242,7 @@ module Variable =
 					fun r v (map, i, arr) ->
 						if mem r map then error 505;
 						match type_of_var r with
+						| Sfsyntax.TAny
 						| Sfsyntax.TBasic Sfsyntax.TAction
 						| Sfsyntax.TBasic Sfsyntax.TGlobal -> (map, i, arr)
 						| Sfsyntax.TBasic Sfsyntax.TObject
@@ -309,7 +312,7 @@ module Variable =
 				 * - it has more than one value
 				 * - if it is a dummy variable, then the global constraint must be exist
 				 *)
-				if (Array.length var.values) > 1 && (var.index > 0 || use_dummy) then
+				if var.goal <> Any && (Array.length var.values) > 1 && (var.index > 0 || use_dummy) then
 				(
 					Buffer.add_char tmp '\n';
 					Buffer.add_string tmp (string_of_int var.index);
diff --git a/ocaml/sfdomain.ml b/ocaml/sfdomain.ml
index 557b341..890f8de 100644
--- a/ocaml/sfdomain.ml
+++ b/ocaml/sfdomain.ml
@@ -16,6 +16,7 @@ and value     = Basic of basic
               | Global of _constraint
               | Link of reference
               | Action of action
+              | Any
 and _value    = Val of value
               | Undefined
 and cell      = ident * value
diff --git a/ocaml/sfdomainhelper.ml b/ocaml/sfdomainhelper.ml
index 5f883ff..39378e9 100644
--- a/ocaml/sfdomainhelper.ml
+++ b/ocaml/sfdomainhelper.ml
@@ -33,6 +33,7 @@ and yaml_of_cell ids vs tab =
 		| Store child   -> "\n" ^ yaml_of_store1 child (tab ^ "  ")
 		| Global global -> yaml_of_constraint global (tab ^ "  ")
 		| Action action -> yaml_of_action action (tab ^ "  ")
+		| Any           -> "$.any"
 	in
 	name ^ value
 
@@ -73,6 +74,7 @@ and json_of_value v =
 	| Store child -> "{" ^ json_of_store1 child ^ "}"
 	| Global global -> json_of_constraint global
 	| Action action -> json_of_action action
+	| Any           -> "$.any"
 
 and json_of_basic v =
 	match v with
diff --git a/ocaml/sflexer.mll b/ocaml/sflexer.mll
index 5825bb1..975973a 100644
--- a/ocaml/sflexer.mll
+++ b/ocaml/sflexer.mll
@@ -26,7 +26,7 @@
 	                "str"; "string"; "obj"; "object"; "include"; "import";
 	                "in"; "if"; "then"; "global"; "not";
 	                "def"; "action"; "sub"; "cost"; "condition"; "conditions";
-	                "effect"; "effects"; "!always"; "!sometime"]
+	                "effect"; "effects"; "!always"; "!sometime"; "any"]
 
 	let is_keyword id =
 		let rec check id words =
@@ -56,6 +56,7 @@ let sfp_include_file = "include" | "import"
 let true_value       = "true"
 let false_value      = "false"
 let null_value       = "null" | "NULL"
+let any_value        = "any"
 let extends          = "extends"
 let data_ref         = "DATA"
 let isa              = "isa"
@@ -103,6 +104,7 @@ rule token =
 	| true_value  { BOOL "true" }
 	| false_value { BOOL "false" }
 	| null_value  { NULL }
+	| any_value   { ANY }
 	| extends     { EXTENDS }
 	| data_ref    { DATA }
 	| isa         { ISA }
diff --git a/ocaml/sfparser.mly b/ocaml/sfparser.mly
index ec3749a..eda0620 100644
--- a/ocaml/sfparser.mly
+++ b/ocaml/sfparser.mly
@@ -21,7 +21,7 @@ open Sfsyntax
 %token <string> SFP_INCLUDE_FILE
 %token <Sfsyntax.block -> Sfsyntax.block> SF_INCLUDE
 %token <Sfsyntax.sfpcontext -> Sfsyntax.sfpcontext> SFP_INCLUDE
-%token EXTENDS COMMA DATA BEGIN END SEP NULL
+%token EXTENDS COMMA DATA BEGIN END SEP NULL ANY
 %token LBRACKET RBRACKET EOS EOF
 %token ISA SCHEMA ASTERIX COLON TBOOL TNUM TSTR TOBJ
 %token GLOBAL EQUAL NOT_EQUAL IF THEN IN NOT LPARENTHESIS RPARENTHESIS
@@ -62,10 +62,14 @@ assignment
 	| reference type_def value { ($1, $2, $3) }
 
 value
-	: EQUAL basic EOS    { BV $2 }
-	| link_reference EOS { LR $1 }
-	| ISA ID protos      { P (SID $2, $3) }
-	| protos             { P (EmptySchema, $1) }
+	: EQUAL basic_value EOS { $2 }
+	| link_reference EOS    { LR $1 }
+	| ISA ID protos         { P (SID $2, $3) }
+	| protos                { P (EmptySchema, $1) }
+
+basic_value
+	: basic  { BV $1 }
+	| ANY    { AnyVal }
 
 protos
 	: EXTENDS prototypes { $2 }
diff --git a/ocaml/sfsyntax.ml b/ocaml/sfsyntax.ml
index bf02852..68e339b 100644
--- a/ocaml/sfsyntax.ml
+++ b/ocaml/sfsyntax.ml
@@ -15,6 +15,7 @@ and  value         = BV  of basicValue
                    | LR  of linkReference
                    | P   of superSchema * prototype
                    | Ac  of action
+                   | AnyVal
 and  prototype     = R_P of reference * prototype
                    | B_P of block * prototype
                    | EmptyPrototype
@@ -40,6 +41,7 @@ and _type     = TBasic   of basicType
               | TRef     of basicType
               | TForward of reference * bool  (* r [link: true, data: false] *)
               | TUndefined
+              | TAny
 and basicType = TBool                         (* (Type Bool)   *)
               | TNum                          (* (Type Num)    *)
               | TStr                          (* (Type Str)    *)
@@ -97,6 +99,7 @@ and string_of_value v =
 	| LR lr      -> " " ^ (string_of_ref lr) ^ ";"
 	| P (sid, p) -> (string_of_super_schema sid) ^ (string_of_proto p)
 	| Ac a       -> string_of_action a
+	| AnyVal     -> "any"
 
 and string_of_proto p =
 	match p with
@@ -130,6 +133,7 @@ and string_of_type t =
 	| TRef bt              -> "*" ^ (string_of_basic_type bt)
 	| TForward (r, islink) -> "?(" ^ (if islink then "" else "*") ^ (String.concat "." r) ^ ")"
 	| TUndefined           -> "!"
+	| TAny                 -> "any"
 
 and string_of_basic_type t =
 	match t with
diff --git a/ocaml/sftype.ml b/ocaml/sftype.ml
index 878fb1b..026af81 100644
--- a/ocaml/sftype.ml
+++ b/ocaml/sftype.ml
@@ -72,6 +72,7 @@ let rec (<:) t1 t2 : bool =                                               (* Sub
 		| TVec tv1, TVec tv2                 -> tv1 <: tv2                (* (Vec Subtype)    *)
 		| TRef tr1, TRef tr2                 -> TBasic tr1 <: TBasic tr2  (* (Ref Subtype)    *)
 		| TBasic TNull, TRef _               -> true                      (* (Ref Null)       *)
+		| TAny, _                            -> true                      (* (Any)            *)
 		| _, _ -> false
 
 
@@ -84,6 +85,7 @@ let rec has_type e t : bool =
 	match t with
 	| TUndefined                -> false
 	| TForward (_, _)           -> true                    (* TODO (Type Forward) *)
+	| TAny                      -> true
 	| TVec tv                   -> has_type e tv           (* (Type Vec)    *)
 	| TRef tr                   -> has_type e (TBasic tr)  (* (Type Ref)    *)
 	| TBasic TBool              -> true                    (* (Type Bool)   *)
@@ -131,7 +133,13 @@ let bind e r t : env =
  * @param t_value type of value which will be assigned
  *)
 let assign e r t t_value =
+	(* if t != TUndefined && not (has_type e t) then
+		error 7 ("In " ^ !^r ^ " - type " ^ (string_of_type t) ^ " is not exist!");
+	if t_value != TUndefined && not (has_type e t_value) then
+		error 7 ("In " ^ !^r ^ " - type " ^ (string_of_type t_value) ^ " is not exist!"); *)
+
 	match (type_of e r), t, t_value with
+	| Undefined, TUndefined, TAny                          -> error 7 (!^r ^ " cannot assign 'any' to undefined type") (* (Assign 7) *)
 	| Undefined, TUndefined, _                             -> bind e r t_value                          (* (Assign1) *)
 	| Undefined, t, _ when t_value <: t                    -> bind e r t                                (* (Assign3) *)
 	| Undefined, t, TForward (r, islink)                   -> (r, t) :: (r, TForward (r, islink)) :: e  (* TODO (Assign5) *)
@@ -296,6 +304,7 @@ let sfDataReference dr =  (* (Deref Data) *)
 		| _, Type (TRef t)   -> TRef t
 		| _, Type (TVec _)   -> error 101 ("dereference of " ^ !^r ^ " is a vector")
 		| _, Type TUndefined -> error 102 ("dereference of " ^ !^r ^ " is TUndefined")
+		| _, Type TAny       -> error 103 ("dereference of " ^ !^r ^ " is TAny")
 		| _, Undefined       -> TForward (r, false)
 
 let sfLinkReference lr =  (* (Deref Link) *)
@@ -385,6 +394,7 @@ and sfValue v =
 	 *)
 	fun ns r t e ->
 		match v with
+		| AnyVal  -> assign e r t TAny
 		| BV bv   -> assign e r t (sfBasicValue bv e ns)
 		| LR link ->
 			(
diff --git a/ocaml/sfvaluation.ml b/ocaml/sfvaluation.ml
index 7cf8809..a2a00d7 100644
--- a/ocaml/sfvaluation.ml
+++ b/ocaml/sfvaluation.ml
@@ -55,6 +55,7 @@ and sfValue v =
 			let s2 = Sfdomain.inherit_proto s1 [] [sid] r in
 			sfPrototype p ns r s2
 		| Ac a               -> sfpAction a ns r s
+		| AnyVal             -> Sfdomain.bind s r Sfdomain.Any
 
 (** 't' (type) is ignored since this function only evaluates the value **)
 and sfAssignment (r, t, v) =
